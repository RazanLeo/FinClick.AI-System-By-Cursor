version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - finclick-network

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./config.env
    depends_on:
      - mongodb
      - redis
    networks:
      - finclick-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # MongoDB Service
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=finclick_ai
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - finclick-network

  # Redis Service
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finclick-network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery_app worker --loglevel=info
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./config.env
    depends_on:
      - backend
      - redis
      - mongodb
    networks:
      - finclick-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./config.env
    depends_on:
      - backend
      - redis
      - mongodb
    networks:
      - finclick-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
    networks:
      - finclick-network

  # AI Engine Service
  ai_engine:
    build:
      context: ./ai_engine
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      - PYTHONPATH=/app
    env_file:
      - ./config.env
    volumes:
      - ./ai_engine:/app
      - ./models_cache:/app/models_cache
    networks:
      - finclick-network

volumes:
  mongodb_data:
  redis_data:
  models_cache:

networks:
  finclick-network:
    driver: bridge
